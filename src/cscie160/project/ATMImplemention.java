package cscie160.project;

import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;


/**
 * Class that implements the ATM interface. The client will interact with this class
 * which will act with the Security and Bank systems.
 *
 * @author John Doyle
 *
 */
@SuppressWarnings("serial")
public class ATMImplemention extends UnicastRemoteObject implements ATM {
    
    /**
     * Amount of money the ATM has initial started with.
     */
    private float cashInATM = 500;
    
    /**
     * Reference to the bank system.
     */
    private Bank bank;
    
    /**
     * Reference to the security system.
     */
    private Security security;
    
    /**
     * List of the connected clients.
     */
    private ArrayList<ATMListener> listenerList =
            new ArrayList<ATMListener>();
    
    /**
     * Default constructor with no existing accounts.
     * @throws RemoteException 
     */
    public ATMImplemention() throws RemoteException {
        /**
         * Required for the UnicastRemoteObject
         */
        super();
        
        /**
         * Factories of the RMI objects that will be initialzied.
         */
        BankFactory bankFactory;
        SecurityFactory securityFactory;
        
        try {
            /**
             * Connect to the RMI to retrieve the BankFactory.
             */
            bankFactory = (BankFactory) Naming
                    .lookup("//localhost/bankfactory");
            
            System.out.println("ATM connected to name service for the Bank.");
            
            /**
             * Initialize the bank implementation.
             */
            bank = bankFactory.getBank();
            
            System.out.println("Got the Bank implementation.");
        } catch (MalformedURLException e) 
        {
            e.printStackTrace();
        } catch (NotBoundException e) {
            e.printStackTrace();
        }
        
        try {
            /**
             * Connect to the RMI to retrieve the SecurityFactory.
             */
            securityFactory = (SecurityFactory) Naming
                    .lookup("//localhost/securityfactory");
            
            System.out.println("ATM connected to name service for the Security.");
            
            /**
             * Initialize the security implementation.
             */
            security = securityFactory.getSecurity();
            
            System.out.println("Got the Security implementation.");
        } catch (MalformedURLException e) {
            e.printStackTrace();
        } catch (NotBoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    /**
     * Deposit money into an account.
     *
     * @param AccountInfo The individual account targeted with their pin code.
     * @param amount The amount of money being deposited.
     * @throws ATMException An exception caused during the transaction.
     * @throws RemoteException An exception caused by the Remote.
     * @throws SecurityException An exception generated by the Security system.
     */
    public final void deposit(AccountInfo accountInfo, float amount) throws ATMException, RemoteException, SecurityException {

        /**
         * Confirm the account is authorized and authenticated for this action.
         */
        if(auth(accountInfo, Commands.DEPOSIT)) {   
            
            /**
             * If this is a negative amount, i.e. a withdrawal, 
             * throw an exception.
             */
            if (amount < 0) {
                throw new ATMException("Negative Deposit.");
            }
    
            /**
             * Pull the account details
             */
            Account account = bank.getAccount(accountInfo);
            
            /**
             * Set the new balance as the current balance and the new amount.
             */
            account.setBalance(account.getBalance() + amount);
            
            /**
             * Transfer data back to the bank.
             */
            bank.setAccount(accountInfo, account);
        }
    }

    /**
     * Withdraw money from an account.
     * 
     * @param AccountInfo The individual account targeted with their pin code.
     * @param amount The amount of money being withdrawn.
     * @throws ATMException An exception caused during the transaction.
     * @throws RemoteException An exception caused by the Remote.
     * @throws SecurityException An exception generated by the Security system.
     */
    public final void withdraw(AccountInfo accountInfo, float amount) throws ATMException, RemoteException, SecurityException {

        /**
         * Confirm the account is authorized and authenticated for this action.
         */
        if(auth(accountInfo, Commands.WITHDRAW)) {
            /**
             * Pull the account details
             */
            Account account = bank.getAccount(accountInfo);
            
            /**
             * Get the current balance of the account.
             */
            float currentBalance = account.getBalance();

            /**
             * If the amount requested is greater than the balance,
             * throw an exception.
             */
            if (currentBalance < amount) {
                throw new ATMException("Account contains insufficient funds.");
            }
            
            /**
             * Confirm that there is enough cash in the ATM for the withdrawal.
             */
            if (cashInATM < amount) {
                throw new ATMException("ATM contains insufficient funds.");
            }
            
            /**
             * Set the new balance as the current balance minus the new amount.
             */
            account.setBalance(currentBalance - amount);
            
            /**
             * Deduct the amount held in the ATM.
             */
            cashInATM -= amount;
            
            /**
             * Transfer data back to the bank.
             */
            bank.setAccount(accountInfo, account);
        }
    }

    /**
     * Get the balance for an account.
     * 
     * @param AccountInfo The individual account targeted with their pin code.
     * @return The amount of money held by the account.
     * @throws ATMException An exception caused during the transaction.
     * @throws RemoteException An exception caused by the Remote.
     * @throws SecurityException An exception generated by the Security system.
     */
    public Float getBalance(AccountInfo accountInfo) throws ATMException, RemoteException, SecurityException {
        /**
         * Confirm the account is authorized and authenticated for this action.
         */
        if(auth(accountInfo, Commands.BALANCE)) {
            /**
             * Pull the account details
             */
            Account account = bank.getAccount(accountInfo);
            
            /**
             * Return the account's balance.
             */
            return account.getBalance();
        }
        
        return null;
    }
    
    /**
     * Withdraw money from one account and deposit it into another.
     * 
     * @param accountInfoFrom The account and pin code to withdraw the money from.
     * @param accountInfoTo The account and pin code to deposit the money to.
     * @param amount The amount of money to transfer.
     * @throws ATMException An exception caused during the transaction.
     * @throws RemoteException An exception caused by the Remote.
     * @throws SecurityException An exception generated by the Security system.
     */
    public void transfer(AccountInfo accountInfoFrom,
            AccountInfo accountInfoTo, float amount) throws ATMException,
            RemoteException, SecurityException {
        /**
         * Confirm the from account is authorized and authenticated to withdraw.
         */
        if(auth(accountInfoFrom, Commands.WITHDRAW)) {
            /**
             * Pull the account details
             */
            Account accountFrom = bank.getAccount(accountInfoFrom);
            
            /**
             * Get the current balance of the account.
             */
            float currentBalance = accountFrom.getBalance();

            /**
             * If the amount requested is greater than the balance,
             * throw an exception.
             */
            if (currentBalance < amount) {
                throw new ATMException("From Account contains insufficient funds.");
            }
            
            /**
             * Confirm the to account is authorized and authenticated for deposits.
             */
            if(auth(accountInfoTo, Commands.DEPOSIT)) {   
                /**
                 * If this is a negative amount, i.e. a withdrawal, 
                 * throw an exception.
                 */
                if (amount < 0) {
                    throw new ATMException("Negative Transfer.");
                }
        
                /**
                 * Pull the account details
                 */
                Account accountTo = bank.getAccount(accountInfoTo);
                
                /**
                 * Set the new balance for the to account as the current balance and the new amount.
                 */
                accountTo.setBalance(accountTo.getBalance() + amount);
                /**
                 * Set the new balance for the from account as the current balance minus the new amount.
                 */
                accountFrom.setBalance(currentBalance - amount);
                
                /**
                 * Transfer data back to the bank.
                 */
                bank.setAccount(accountInfoTo, accountTo);
                bank.setAccount(accountInfoFrom, accountFrom);
            }
        }
    }

    /**
     * Check that the account is autenticated and authorized by the security system
     * for the desired action.
     *  
     * @param accountInfo the account to be checked.
     * @param command The action the client wishes to perform.
     * @return True if the account is authenticated and authorized.
     * @throws RemoteException If there is an issue with the connection.
     * @throws SecurityException If there is an issue with the security system.
     */
    public boolean auth(AccountInfo accountInfo, Commands command) throws RemoteException,
            SecurityException {
        
        /**
         * Notify all listeners with a Transaction Notification
         */
        notify(accountInfo, command);
        
        /**
         * Check that the account pin matches the security system.
         */
        if (!security.authenticated(accountInfo)) {
            throw new SecurityException("Account is not authenticated.");
        }
        
        /**
         * Check that the account is authorized to perform the command.
         */
        if (!security.authorized(accountInfo, command)) {
            throw new SecurityException("Account is not authorized to perform this action.");
        }
        
        /**
         * Allow the transaction to continue.
         */
        return true;
    }
    
    /**
     * Register the client connection.
     * 
     * @param atmListener client connection.
     * @throws RemoteException If there is an issue with the connection.
     */
    public final void register(ATMListener atmListener) throws RemoteException
    {
        /**
         * Add the client to the ArrayList of listeners.
         */
        listenerList.add(atmListener);
    }
    
    /**
     * Unregister the client connection.
     * 
     * @param atmListener client connection.
     * @throws RemoteException If there is an issue with the connection.
     * @throws ATMException If there is no connection.
     */
    public void unregister(ATMListener atmListener) throws ATMException, RemoteException
    {
        ArrayList<ATMListener> newListenerList =
                new ArrayList<ATMListener>();
        
        for (ATMListener listeners : listenerList) {
            if (!listeners.equals(atmListener)) {
                newListenerList.add(listeners);
            }
        }
        listenerList = newListenerList;
    }

    /**
     * Notify the listeners about the Transaction Notification/
     * 
     * @param accountInfo The account performing the transaction.
     * @param command The transaction command.
     */
    public void notify(AccountInfo accountInfo, Commands command) {
        /**
         * Set the transaction notification.
         */
        TransactionNotification notification = new TransactionNotification(accountInfo, command);
        
        /**
         * Loop over each listener.
         */
        for (ATMListener listeners : listenerList) {
            try {
                /**
                 * Call the listener's handler method and pass it the notification.
                 */
                listeners.handler(notification);
            } catch (RemoteException e) {
                e.printStackTrace();
            }
        }
    } 
    
}
